
const {expect} = require("chai");
const exp = require("constants");
const { sync } = require("glob");
const {ethers,network} = require("hardhat");
const { any } = require("hardhat/internal/core/params/argumentTypes");



describe("CurvePool_Swap_Test",function(){   
    let USDT_WHALE = '0x56Eddb7aa87536c09CCc2793473599fD21A8b17F';
    let USDT = '0xdAC17F958D2ee523a2206206994597C13D831ec7';
    let USDC ='0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48';
    let whale;
    let usdt;
    let usdc;
    let curve_Pool;

    beforeEach(async()=>{
        await network.provider.request({
        method: "hardhat_impersonateAccount",
        params: [USDT_WHALE]})    

        whale =  await ethers.getSigner(USDT_WHALE);
        usdt = await ethers.getContractAt("IERC20",USDT);
        usdc = await ethers.getContractAt("IERC20",USDC);
        const Curve_Pool = await ethers.getContractFactory("CurvePool_Swap_Test");
        curve_Pool =  await Curve_Pool.deploy()
    })
    


    // let  route = ["0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48","0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7","0xdAC17F958D2ee523a2206206994597C13D831ec7","0x0000000000000000000000000000000000000000",
    //               "0x0000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000"]
                    
    // let inputAddre = "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48";

    // let swap_params = [[1,2,1],[0,0,0],[0,0,0],[0,0,0]];

    // let  amounts = 10000000;

    // let  expected = 9000000;

    // let pools = ["0x0000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000"];

    // // let outaddres = "0xdAC17F958D2ee523a2206206994597C13D831ec7";

    // let receiver = '0x0349CA70eE64Dc5d5a33735b32b9a4A6f64936af';

   let _exchangeData = '0x000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7000000000000000000000000dac17f958d2ee523a2206206994597c13d831eceddb7aa87536c09ccc2793473599fd21a8b17f'; 
   let amounts = 10n * 10n ** 6n;

    describe("fork mainnet",()=>{
      it("unlock caaount",async()=>{
        // Data  =  await curveSwap.get_exchange_routings(_initial,_target,_amount);
        // console.log(Data[0]);
        let bal_usdc =  await usdc.balanceOf(whale.address);
        console.log(bal_usdc); 

        let bal_usdt =  await usdt.balanceOf(whale.address);
        console.log(bal_usdt); 
        console.log("------------111111111--------------------")


        await usdc.connect(whale).approve(curve_Pool.address,amounts);
        console.log("------------333333333--------------------")

        let received_Token =  await  curve_Pool.connect(whale).filterSwap(_exchangeData);
        console.log(received_Token)
        console.log("------------44444--------------------")
        

        let _bal_usdc =  await usdc.balanceOf(whale.address);
        console.log(_bal_usdc); 


        let turve_usdt = await usdt.balanceOf(whale.address);
        console.log("user_usdt:",turve_usdt);

      })

    })


});